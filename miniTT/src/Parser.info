-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from Parser.y
-----------------------------------------------------------------------------


-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Prog                               (0)
	Prog ->                                            (1)
	Prog -> Decl ';' Prog                              (2)
	Expr -> lambda Pat '.' Expr                        (3)
	Expr -> str                                        (4)
	Expr -> Expr Expr                                  (5)
	Expr -> constr Expr                                (6)
	Expr -> 'Π' Pat ColonExprDot Expr                  (7)
	Expr -> 'Σ' Pat ColonExprDot Expr                  (8)
	Expr -> 'U'                                        (9)
	Expr -> Expr '.' one                               (10)
	Expr -> Expr '.' two                               (11)
	Expr -> zero                                       (12)
	Expr -> one                                        (13)
	Expr -> Expr ',' Expr                              (14)
	Expr -> fun Choices                                (15)
	Expr -> sum Choices                                (16)
	Expr -> Expr '→' Expr                              (17)
	Expr -> Expr '×' Expr                              (18)
	Expr -> '(' Expr ')'                               (19)
	ColonExprDot -> ':' Expr '.'                       (20)
	Pat -> str                                         (21)
	Pat -> Pat ',' Pat                                 (22)
	Pat -> '_'                                         (23)
	Choices -> '(' Choices_ ')'                        (24)
	Choices_ ->                                        (25)
	Choices_ -> ChoisesWhite                           (26)
	Choices_ -> ChoisesArrow                           (27)
	ChoisesWhite -> str Expr                           (28)
	ChoisesWhite -> str Expr '|' ChoisesWhite          (29)
	ChoisesArrow -> str '→' Expr                       (30)
	ChoisesArrow -> str '→' Expr '|' ChoisesArrow      (31)
	Decl -> Pat ':' Expr '=' Expr                      (32)
	Decl -> rec Pat ':' Expr '=' Expr                  (33)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	lambda         { TokenLam }
	rec            { TokenRec }
	'→'            { TokenArrow }
	str            { TokenVar $$ }
	constr         { TokenConstr $$ }
	'='            { TokenEq }
	'('            { TokenLParen }
	')'            { TokenRParen }
	'.'            { TokenDot }
	':'            { TokenColon }
	';'            { TokenSemiColon }
	'Π'            { TokenPi }
	'Σ'            { TokenSigma }
	','            { TokenComma }
	fun            { TokenFun }
	sum            { TokenSum }
	'|'            { TokenVBar }
	'_'            { TokenDummy }
	zero           { TokenZero }
	one            { TokenOne }
	two            { TokenTwo }
	'×'            { TokenTimes }
	'U'            { TokenU }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Prog            rules 1, 2
	Expr            rules 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19
	ColonExprDot    rule  20
	Pat             rules 21, 22, 23
	Choices         rule  24
	Choices_        rules 25, 26, 27
	ChoisesWhite    rules 28, 29
	ChoisesArrow    rules 30, 31
	Decl            rules 32, 33

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	rec            shift, and enter state 5
	str            shift, and enter state 6
	'_'            shift, and enter state 7
	%eof           reduce using rule 1

	Prog           goto state 2
	Pat            goto state 3
	Decl           goto state 4

State 1




State 2

	%start_parse -> Prog .                              (rule 0)

	%eof           accept


State 3

	Pat -> Pat . ',' Pat                                (rule 22)
	Decl -> Pat . ':' Expr '=' Expr                     (rule 32)

	':'            shift, and enter state 10
	','            shift, and enter state 11


State 4

	Prog -> Decl . ';' Prog                             (rule 2)

	';'            shift, and enter state 9


State 5

	Decl -> rec . Pat ':' Expr '=' Expr                 (rule 33)

	str            shift, and enter state 6
	'_'            shift, and enter state 7

	Pat            goto state 8

State 6

	Pat -> str .                                        (rule 21)

	'.'            reduce using rule 21
	':'            reduce using rule 21
	','            reduce using rule 21


State 7

	Pat -> '_' .                                        (rule 23)

	'.'            reduce using rule 23
	':'            reduce using rule 23
	','            reduce using rule 23


State 8

	Pat -> Pat . ',' Pat                                (rule 22)
	Decl -> rec Pat . ':' Expr '=' Expr                 (rule 33)

	':'            shift, and enter state 26
	','            shift, and enter state 11


State 9

	Prog -> Decl ';' . Prog                             (rule 2)

	rec            shift, and enter state 5
	str            shift, and enter state 6
	'_'            shift, and enter state 7
	%eof           reduce using rule 1

	Prog           goto state 25
	Pat            goto state 3
	Decl           goto state 4

State 10

	Decl -> Pat ':' . Expr '=' Expr                     (rule 32)

	lambda         shift, and enter state 14
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'U'            shift, and enter state 24

	Expr           goto state 13

State 11

	Pat -> Pat ',' . Pat                                (rule 22)

	str            shift, and enter state 6
	'_'            shift, and enter state 7

	Pat            goto state 12

State 12

	Pat -> Pat . ',' Pat                                (rule 22)
	Pat -> Pat ',' Pat .                                (rule 22)

	'.'            reduce using rule 22
	':'            reduce using rule 22
	','            reduce using rule 22


State 13

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 10)
	Expr -> Expr . '.' two                              (rule 11)
	Expr -> Expr . ',' Expr                             (rule 14)
	Expr -> Expr . '→' Expr                             (rule 17)
	Expr -> Expr . '×' Expr                             (rule 18)
	Decl -> Pat ':' Expr . '=' Expr                     (rule 32)

	lambda         shift, and enter state 14
	'→'            shift, and enter state 37
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'='            shift, and enter state 38
	'('            shift, and enter state 17
	'.'            shift, and enter state 39
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	','            shift, and enter state 40
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'×'            shift, and enter state 41
	'U'            shift, and enter state 24

	Expr           goto state 36

State 14

	Expr -> lambda . Pat '.' Expr                       (rule 3)

	str            shift, and enter state 6
	'_'            shift, and enter state 7

	Pat            goto state 35

State 15

	Expr -> str .                                       (rule 4)

	lambda         reduce using rule 4
	'→'            reduce using rule 4
	str            reduce using rule 4
	constr         reduce using rule 4
	'='            reduce using rule 4
	'('            reduce using rule 4
	')'            reduce using rule 4
	'.'            reduce using rule 4
	';'            reduce using rule 4
	'Π'            reduce using rule 4
	'Σ'            reduce using rule 4
	','            reduce using rule 4
	fun            reduce using rule 4
	sum            reduce using rule 4
	'|'            reduce using rule 4
	zero           reduce using rule 4
	one            reduce using rule 4
	'×'            reduce using rule 4
	'U'            reduce using rule 4


State 16

	Expr -> constr . Expr                               (rule 6)

	lambda         shift, and enter state 14
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'U'            shift, and enter state 24

	Expr           goto state 34

State 17

	Expr -> '(' . Expr ')'                              (rule 19)

	lambda         shift, and enter state 14
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'U'            shift, and enter state 24

	Expr           goto state 33

State 18

	Expr -> 'Π' . Pat ColonExprDot Expr                 (rule 7)

	str            shift, and enter state 6
	'_'            shift, and enter state 7

	Pat            goto state 32

State 19

	Expr -> 'Σ' . Pat ColonExprDot Expr                 (rule 8)

	str            shift, and enter state 6
	'_'            shift, and enter state 7

	Pat            goto state 31

State 20

	Expr -> fun . Choices                               (rule 15)

	'('            shift, and enter state 29

	Choices        goto state 30

State 21

	Expr -> sum . Choices                               (rule 16)

	'('            shift, and enter state 29

	Choices        goto state 28

State 22

	Expr -> zero .                                      (rule 12)

	lambda         reduce using rule 12
	'→'            reduce using rule 12
	str            reduce using rule 12
	constr         reduce using rule 12
	'='            reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	'.'            reduce using rule 12
	';'            reduce using rule 12
	'Π'            reduce using rule 12
	'Σ'            reduce using rule 12
	','            reduce using rule 12
	fun            reduce using rule 12
	sum            reduce using rule 12
	'|'            reduce using rule 12
	zero           reduce using rule 12
	one            reduce using rule 12
	'×'            reduce using rule 12
	'U'            reduce using rule 12


State 23

	Expr -> one .                                       (rule 13)

	lambda         reduce using rule 13
	'→'            reduce using rule 13
	str            reduce using rule 13
	constr         reduce using rule 13
	'='            reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	'.'            reduce using rule 13
	';'            reduce using rule 13
	'Π'            reduce using rule 13
	'Σ'            reduce using rule 13
	','            reduce using rule 13
	fun            reduce using rule 13
	sum            reduce using rule 13
	'|'            reduce using rule 13
	zero           reduce using rule 13
	one            reduce using rule 13
	'×'            reduce using rule 13
	'U'            reduce using rule 13


State 24

	Expr -> 'U' .                                       (rule 9)

	lambda         reduce using rule 9
	'→'            reduce using rule 9
	str            reduce using rule 9
	constr         reduce using rule 9
	'='            reduce using rule 9
	'('            reduce using rule 9
	')'            reduce using rule 9
	'.'            reduce using rule 9
	';'            reduce using rule 9
	'Π'            reduce using rule 9
	'Σ'            reduce using rule 9
	','            reduce using rule 9
	fun            reduce using rule 9
	sum            reduce using rule 9
	'|'            reduce using rule 9
	zero           reduce using rule 9
	one            reduce using rule 9
	'×'            reduce using rule 9
	'U'            reduce using rule 9


State 25

	Prog -> Decl ';' Prog .                             (rule 2)

	%eof           reduce using rule 2


State 26

	Decl -> rec Pat ':' . Expr '=' Expr                 (rule 33)

	lambda         shift, and enter state 14
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'U'            shift, and enter state 24

	Expr           goto state 27

State 27

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 10)
	Expr -> Expr . '.' two                              (rule 11)
	Expr -> Expr . ',' Expr                             (rule 14)
	Expr -> Expr . '→' Expr                             (rule 17)
	Expr -> Expr . '×' Expr                             (rule 18)
	Decl -> rec Pat ':' Expr . '=' Expr                 (rule 33)

	lambda         shift, and enter state 14
	'→'            shift, and enter state 37
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'='            shift, and enter state 57
	'('            shift, and enter state 17
	'.'            shift, and enter state 39
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	','            shift, and enter state 40
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'×'            shift, and enter state 41
	'U'            shift, and enter state 24

	Expr           goto state 36

State 28

	Expr -> sum Choices .                               (rule 16)

	lambda         reduce using rule 16
	'→'            reduce using rule 16
	str            reduce using rule 16
	constr         reduce using rule 16
	'='            reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	'.'            reduce using rule 16
	';'            reduce using rule 16
	'Π'            reduce using rule 16
	'Σ'            reduce using rule 16
	','            reduce using rule 16
	fun            reduce using rule 16
	sum            reduce using rule 16
	'|'            reduce using rule 16
	zero           reduce using rule 16
	one            reduce using rule 16
	'×'            reduce using rule 16
	'U'            reduce using rule 16


State 29

	Choices -> '(' . Choices_ ')'                       (rule 24)

	str            shift, and enter state 56
	')'            reduce using rule 25

	Choices_       goto state 53
	ChoisesWhite   goto state 54
	ChoisesArrow   goto state 55

State 30

	Expr -> fun Choices .                               (rule 15)

	lambda         reduce using rule 15
	'→'            reduce using rule 15
	str            reduce using rule 15
	constr         reduce using rule 15
	'='            reduce using rule 15
	'('            reduce using rule 15
	')'            reduce using rule 15
	'.'            reduce using rule 15
	';'            reduce using rule 15
	'Π'            reduce using rule 15
	'Σ'            reduce using rule 15
	','            reduce using rule 15
	fun            reduce using rule 15
	sum            reduce using rule 15
	'|'            reduce using rule 15
	zero           reduce using rule 15
	one            reduce using rule 15
	'×'            reduce using rule 15
	'U'            reduce using rule 15


State 31

	Expr -> 'Σ' Pat . ColonExprDot Expr                 (rule 8)
	Pat -> Pat . ',' Pat                                (rule 22)

	':'            shift, and enter state 51
	','            shift, and enter state 11

	ColonExprDot   goto state 52

State 32

	Expr -> 'Π' Pat . ColonExprDot Expr                 (rule 7)
	Pat -> Pat . ',' Pat                                (rule 22)

	':'            shift, and enter state 51
	','            shift, and enter state 11

	ColonExprDot   goto state 50

State 33

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 10)
	Expr -> Expr . '.' two                              (rule 11)
	Expr -> Expr . ',' Expr                             (rule 14)
	Expr -> Expr . '→' Expr                             (rule 17)
	Expr -> Expr . '×' Expr                             (rule 18)
	Expr -> '(' Expr . ')'                              (rule 19)

	lambda         shift, and enter state 14
	'→'            shift, and enter state 37
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	')'            shift, and enter state 49
	'.'            shift, and enter state 39
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	','            shift, and enter state 40
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'×'            shift, and enter state 41
	'U'            shift, and enter state 24

	Expr           goto state 36

State 34

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> constr Expr .                               (rule 6)
	Expr -> Expr . '.' one                              (rule 10)
	Expr -> Expr . '.' two                              (rule 11)
	Expr -> Expr . ',' Expr                             (rule 14)
	Expr -> Expr . '→' Expr                             (rule 17)
	Expr -> Expr . '×' Expr                             (rule 18)

	lambda         reduce using rule 6
	'→'            reduce using rule 6
	str            reduce using rule 6
	constr         reduce using rule 6
	'='            reduce using rule 6
	'('            reduce using rule 6
	')'            reduce using rule 6
	'.'            reduce using rule 6
	';'            reduce using rule 6
	'Π'            reduce using rule 6
	'Σ'            reduce using rule 6
	','            reduce using rule 6
	fun            reduce using rule 6
	sum            reduce using rule 6
	'|'            reduce using rule 6
	zero           reduce using rule 6
	one            reduce using rule 6
	'×'            reduce using rule 6
	'U'            reduce using rule 6

	Expr           goto state 36

State 35

	Expr -> lambda Pat . '.' Expr                       (rule 3)
	Pat -> Pat . ',' Pat                                (rule 22)

	'.'            shift, and enter state 48
	','            shift, and enter state 11


State 36

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr Expr .                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 10)
	Expr -> Expr . '.' two                              (rule 11)
	Expr -> Expr . ',' Expr                             (rule 14)
	Expr -> Expr . '→' Expr                             (rule 17)
	Expr -> Expr . '×' Expr                             (rule 18)

	lambda         reduce using rule 5
	'→'            reduce using rule 5
	str            reduce using rule 5
	constr         reduce using rule 5
	'='            reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	'.'            reduce using rule 5
	';'            reduce using rule 5
	'Π'            reduce using rule 5
	'Σ'            reduce using rule 5
	','            reduce using rule 5
	fun            reduce using rule 5
	sum            reduce using rule 5
	'|'            reduce using rule 5
	zero           reduce using rule 5
	one            reduce using rule 5
	'×'            reduce using rule 5
	'U'            reduce using rule 5

	Expr           goto state 36

State 37

	Expr -> Expr '→' . Expr                             (rule 17)

	lambda         shift, and enter state 14
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'U'            shift, and enter state 24

	Expr           goto state 47

State 38

	Decl -> Pat ':' Expr '=' . Expr                     (rule 32)

	lambda         shift, and enter state 14
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'U'            shift, and enter state 24

	Expr           goto state 46

State 39

	Expr -> Expr '.' . one                              (rule 10)
	Expr -> Expr '.' . two                              (rule 11)

	one            shift, and enter state 44
	two            shift, and enter state 45


State 40

	Expr -> Expr ',' . Expr                             (rule 14)

	lambda         shift, and enter state 14
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'U'            shift, and enter state 24

	Expr           goto state 43

State 41

	Expr -> Expr '×' . Expr                             (rule 18)

	lambda         shift, and enter state 14
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'U'            shift, and enter state 24

	Expr           goto state 42

State 42

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 10)
	Expr -> Expr . '.' two                              (rule 11)
	Expr -> Expr . ',' Expr                             (rule 14)
	Expr -> Expr . '→' Expr                             (rule 17)
	Expr -> Expr . '×' Expr                             (rule 18)
	Expr -> Expr '×' Expr .                             (rule 18)

	lambda         reduce using rule 18
	'→'            reduce using rule 18
	str            reduce using rule 18
	constr         reduce using rule 18
	'='            reduce using rule 18
	'('            reduce using rule 18
	')'            reduce using rule 18
	'.'            reduce using rule 18
	';'            reduce using rule 18
	'Π'            reduce using rule 18
	'Σ'            reduce using rule 18
	','            reduce using rule 18
	fun            reduce using rule 18
	sum            reduce using rule 18
	'|'            reduce using rule 18
	zero           reduce using rule 18
	one            reduce using rule 18
	'×'            reduce using rule 18
	'U'            reduce using rule 18

	Expr           goto state 36

State 43

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 10)
	Expr -> Expr . '.' two                              (rule 11)
	Expr -> Expr . ',' Expr                             (rule 14)
	Expr -> Expr ',' Expr .                             (rule 14)
	Expr -> Expr . '→' Expr                             (rule 17)
	Expr -> Expr . '×' Expr                             (rule 18)

	lambda         reduce using rule 14
	'→'            reduce using rule 14
	str            reduce using rule 14
	constr         reduce using rule 14
	'='            reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	'.'            reduce using rule 14
	';'            reduce using rule 14
	'Π'            reduce using rule 14
	'Σ'            reduce using rule 14
	','            reduce using rule 14
	fun            reduce using rule 14
	sum            reduce using rule 14
	'|'            reduce using rule 14
	zero           reduce using rule 14
	one            reduce using rule 14
	'×'            reduce using rule 14
	'U'            reduce using rule 14

	Expr           goto state 36

State 44

	Expr -> Expr '.' one .                              (rule 10)

	lambda         reduce using rule 10
	'→'            reduce using rule 10
	str            reduce using rule 10
	constr         reduce using rule 10
	'='            reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	'.'            reduce using rule 10
	';'            reduce using rule 10
	'Π'            reduce using rule 10
	'Σ'            reduce using rule 10
	','            reduce using rule 10
	fun            reduce using rule 10
	sum            reduce using rule 10
	'|'            reduce using rule 10
	zero           reduce using rule 10
	one            reduce using rule 10
	'×'            reduce using rule 10
	'U'            reduce using rule 10


State 45

	Expr -> Expr '.' two .                              (rule 11)

	lambda         reduce using rule 11
	'→'            reduce using rule 11
	str            reduce using rule 11
	constr         reduce using rule 11
	'='            reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	'.'            reduce using rule 11
	';'            reduce using rule 11
	'Π'            reduce using rule 11
	'Σ'            reduce using rule 11
	','            reduce using rule 11
	fun            reduce using rule 11
	sum            reduce using rule 11
	'|'            reduce using rule 11
	zero           reduce using rule 11
	one            reduce using rule 11
	'×'            reduce using rule 11
	'U'            reduce using rule 11


State 46

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 10)
	Expr -> Expr . '.' two                              (rule 11)
	Expr -> Expr . ',' Expr                             (rule 14)
	Expr -> Expr . '→' Expr                             (rule 17)
	Expr -> Expr . '×' Expr                             (rule 18)
	Decl -> Pat ':' Expr '=' Expr .                     (rule 32)

	lambda         shift, and enter state 14
	'→'            shift, and enter state 37
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	'.'            shift, and enter state 39
	';'            reduce using rule 32
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	','            shift, and enter state 40
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'×'            shift, and enter state 41
	'U'            shift, and enter state 24

	Expr           goto state 36

State 47

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 10)
	Expr -> Expr . '.' two                              (rule 11)
	Expr -> Expr . ',' Expr                             (rule 14)
	Expr -> Expr . '→' Expr                             (rule 17)
	Expr -> Expr '→' Expr .                             (rule 17)
	Expr -> Expr . '×' Expr                             (rule 18)

	lambda         reduce using rule 17
	'→'            shift, and enter state 37
	str            reduce using rule 17
	constr         reduce using rule 17
	'='            reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	'.'            shift, and enter state 39
	';'            reduce using rule 17
	'Π'            reduce using rule 17
	'Σ'            reduce using rule 17
	','            shift, and enter state 40
	fun            reduce using rule 17
	sum            reduce using rule 17
	'|'            reduce using rule 17
	zero           reduce using rule 17
	one            reduce using rule 17
	'×'            shift, and enter state 41
	'U'            reduce using rule 17

	Expr           goto state 36

State 48

	Expr -> lambda Pat '.' . Expr                       (rule 3)

	lambda         shift, and enter state 14
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'U'            shift, and enter state 24

	Expr           goto state 65

State 49

	Expr -> '(' Expr ')' .                              (rule 19)

	lambda         reduce using rule 19
	'→'            reduce using rule 19
	str            reduce using rule 19
	constr         reduce using rule 19
	'='            reduce using rule 19
	'('            reduce using rule 19
	')'            reduce using rule 19
	'.'            reduce using rule 19
	';'            reduce using rule 19
	'Π'            reduce using rule 19
	'Σ'            reduce using rule 19
	','            reduce using rule 19
	fun            reduce using rule 19
	sum            reduce using rule 19
	'|'            reduce using rule 19
	zero           reduce using rule 19
	one            reduce using rule 19
	'×'            reduce using rule 19
	'U'            reduce using rule 19


State 50

	Expr -> 'Π' Pat ColonExprDot . Expr                 (rule 7)

	lambda         shift, and enter state 14
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'U'            shift, and enter state 24

	Expr           goto state 64

State 51

	ColonExprDot -> ':' . Expr '.'                      (rule 20)

	lambda         shift, and enter state 14
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'U'            shift, and enter state 24

	Expr           goto state 63

State 52

	Expr -> 'Σ' Pat ColonExprDot . Expr                 (rule 8)

	lambda         shift, and enter state 14
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'U'            shift, and enter state 24

	Expr           goto state 62

State 53

	Choices -> '(' Choices_ . ')'                       (rule 24)

	')'            shift, and enter state 61


State 54

	Choices_ -> ChoisesWhite .                          (rule 26)

	')'            reduce using rule 26


State 55

	Choices_ -> ChoisesArrow .                          (rule 27)

	')'            reduce using rule 27


State 56

	ChoisesWhite -> str . Expr                          (rule 28)
	ChoisesWhite -> str . Expr '|' ChoisesWhite         (rule 29)
	ChoisesArrow -> str . '→' Expr                      (rule 30)
	ChoisesArrow -> str . '→' Expr '|' ChoisesArrow     (rule 31)

	lambda         shift, and enter state 14
	'→'            shift, and enter state 60
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'U'            shift, and enter state 24

	Expr           goto state 59

State 57

	Decl -> rec Pat ':' Expr '=' . Expr                 (rule 33)

	lambda         shift, and enter state 14
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'U'            shift, and enter state 24

	Expr           goto state 58

State 58

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 10)
	Expr -> Expr . '.' two                              (rule 11)
	Expr -> Expr . ',' Expr                             (rule 14)
	Expr -> Expr . '→' Expr                             (rule 17)
	Expr -> Expr . '×' Expr                             (rule 18)
	Decl -> rec Pat ':' Expr '=' Expr .                 (rule 33)

	lambda         shift, and enter state 14
	'→'            shift, and enter state 37
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	'.'            shift, and enter state 39
	';'            reduce using rule 33
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	','            shift, and enter state 40
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'×'            shift, and enter state 41
	'U'            shift, and enter state 24

	Expr           goto state 36

State 59

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 10)
	Expr -> Expr . '.' two                              (rule 11)
	Expr -> Expr . ',' Expr                             (rule 14)
	Expr -> Expr . '→' Expr                             (rule 17)
	Expr -> Expr . '×' Expr                             (rule 18)
	ChoisesWhite -> str Expr .                          (rule 28)
	ChoisesWhite -> str Expr . '|' ChoisesWhite         (rule 29)

	lambda         shift, and enter state 14
	'→'            shift, and enter state 37
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	')'            reduce using rule 28
	'.'            shift, and enter state 39
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	','            shift, and enter state 40
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	'|'            shift, and enter state 68
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'×'            shift, and enter state 41
	'U'            shift, and enter state 24

	Expr           goto state 36

State 60

	ChoisesArrow -> str '→' . Expr                      (rule 30)
	ChoisesArrow -> str '→' . Expr '|' ChoisesArrow     (rule 31)

	lambda         shift, and enter state 14
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'U'            shift, and enter state 24

	Expr           goto state 67

State 61

	Choices -> '(' Choices_ ')' .                       (rule 24)

	lambda         reduce using rule 24
	'→'            reduce using rule 24
	str            reduce using rule 24
	constr         reduce using rule 24
	'='            reduce using rule 24
	'('            reduce using rule 24
	')'            reduce using rule 24
	'.'            reduce using rule 24
	';'            reduce using rule 24
	'Π'            reduce using rule 24
	'Σ'            reduce using rule 24
	','            reduce using rule 24
	fun            reduce using rule 24
	sum            reduce using rule 24
	'|'            reduce using rule 24
	zero           reduce using rule 24
	one            reduce using rule 24
	'×'            reduce using rule 24
	'U'            reduce using rule 24


State 62

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> 'Σ' Pat ColonExprDot Expr .                 (rule 8)
	Expr -> Expr . '.' one                              (rule 10)
	Expr -> Expr . '.' two                              (rule 11)
	Expr -> Expr . ',' Expr                             (rule 14)
	Expr -> Expr . '→' Expr                             (rule 17)
	Expr -> Expr . '×' Expr                             (rule 18)

	lambda         shift, and enter state 14
	'→'            shift, and enter state 37
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'='            reduce using rule 8
	'('            shift, and enter state 17
	')'            reduce using rule 8
	'.'            shift, and enter state 39
	';'            reduce using rule 8
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	','            shift, and enter state 40
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	'|'            reduce using rule 8
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'×'            shift, and enter state 41
	'U'            shift, and enter state 24

	Expr           goto state 36

State 63

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 10)
	Expr -> Expr . '.' two                              (rule 11)
	Expr -> Expr . ',' Expr                             (rule 14)
	Expr -> Expr . '→' Expr                             (rule 17)
	Expr -> Expr . '×' Expr                             (rule 18)
	ColonExprDot -> ':' Expr . '.'                      (rule 20)

	lambda         shift, and enter state 14
	'→'            shift, and enter state 37
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	'.'            shift, and enter state 66
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	','            shift, and enter state 40
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'×'            shift, and enter state 41
	'U'            shift, and enter state 24

	Expr           goto state 36

State 64

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> 'Π' Pat ColonExprDot Expr .                 (rule 7)
	Expr -> Expr . '.' one                              (rule 10)
	Expr -> Expr . '.' two                              (rule 11)
	Expr -> Expr . ',' Expr                             (rule 14)
	Expr -> Expr . '→' Expr                             (rule 17)
	Expr -> Expr . '×' Expr                             (rule 18)

	lambda         shift, and enter state 14
	'→'            shift, and enter state 37
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'='            reduce using rule 7
	'('            shift, and enter state 17
	')'            reduce using rule 7
	'.'            shift, and enter state 39
	';'            reduce using rule 7
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	','            shift, and enter state 40
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	'|'            reduce using rule 7
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'×'            shift, and enter state 41
	'U'            shift, and enter state 24

	Expr           goto state 36

State 65

	Expr -> lambda Pat '.' Expr .                       (rule 3)
	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 10)
	Expr -> Expr . '.' two                              (rule 11)
	Expr -> Expr . ',' Expr                             (rule 14)
	Expr -> Expr . '→' Expr                             (rule 17)
	Expr -> Expr . '×' Expr                             (rule 18)

	lambda         reduce using rule 3
	'→'            reduce using rule 3
	str            reduce using rule 3
	constr         reduce using rule 3
	'='            reduce using rule 3
	'('            reduce using rule 3
	')'            reduce using rule 3
	'.'            reduce using rule 3
	';'            reduce using rule 3
	'Π'            reduce using rule 3
	'Σ'            reduce using rule 3
	','            shift, and enter state 40
	fun            reduce using rule 3
	sum            reduce using rule 3
	'|'            reduce using rule 3
	zero           reduce using rule 3
	one            reduce using rule 3
	'×'            shift, and enter state 41
	'U'            reduce using rule 3

	Expr           goto state 36

State 66

	Expr -> Expr '.' . one                              (rule 10)
	Expr -> Expr '.' . two                              (rule 11)
	ColonExprDot -> ':' Expr '.' .                      (rule 20)

	lambda         reduce using rule 20
	str            reduce using rule 20
	constr         reduce using rule 20
	'('            reduce using rule 20
	'Π'            reduce using rule 20
	'Σ'            reduce using rule 20
	fun            reduce using rule 20
	sum            reduce using rule 20
	zero           reduce using rule 20
	one            reduce using rule 20
	two            shift, and enter state 45
	'U'            reduce using rule 20


State 67

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 10)
	Expr -> Expr . '.' two                              (rule 11)
	Expr -> Expr . ',' Expr                             (rule 14)
	Expr -> Expr . '→' Expr                             (rule 17)
	Expr -> Expr . '×' Expr                             (rule 18)
	ChoisesArrow -> str '→' Expr .                      (rule 30)
	ChoisesArrow -> str '→' Expr . '|' ChoisesArrow     (rule 31)

	lambda         shift, and enter state 14
	'→'            shift, and enter state 37
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	')'            reduce using rule 30
	'.'            shift, and enter state 39
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	','            shift, and enter state 40
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	'|'            shift, and enter state 71
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'×'            shift, and enter state 41
	'U'            shift, and enter state 24

	Expr           goto state 36

State 68

	ChoisesWhite -> str Expr '|' . ChoisesWhite         (rule 29)

	str            shift, and enter state 70

	ChoisesWhite   goto state 69

State 69

	ChoisesWhite -> str Expr '|' ChoisesWhite .         (rule 29)

	')'            reduce using rule 29


State 70

	ChoisesWhite -> str . Expr                          (rule 28)
	ChoisesWhite -> str . Expr '|' ChoisesWhite         (rule 29)

	lambda         shift, and enter state 14
	str            shift, and enter state 15
	constr         shift, and enter state 16
	'('            shift, and enter state 17
	'Π'            shift, and enter state 18
	'Σ'            shift, and enter state 19
	fun            shift, and enter state 20
	sum            shift, and enter state 21
	zero           shift, and enter state 22
	one            shift, and enter state 23
	'U'            shift, and enter state 24

	Expr           goto state 59

State 71

	ChoisesArrow -> str '→' Expr '|' . ChoisesArrow     (rule 31)

	str            shift, and enter state 73

	ChoisesArrow   goto state 72

State 72

	ChoisesArrow -> str '→' Expr '|' ChoisesArrow .     (rule 31)

	')'            reduce using rule 31


State 73

	ChoisesArrow -> str . '→' Expr                      (rule 30)
	ChoisesArrow -> str . '→' Expr '|' ChoisesArrow     (rule 31)

	'→'            shift, and enter state 60


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 34
Number of terminals: 23
Number of non-terminals: 10
Number of states: 74
