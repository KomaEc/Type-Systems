-----------------------------------------------------------------------------
Info file generated by Happy Version 1.19.9 from Parser.y
-----------------------------------------------------------------------------

state 67 contains 3 reduce/reduce conflicts.

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_parse -> Prog                               (0)
	Prog ->                                            (1)
	Prog -> Decl ';' Prog                              (2)
	Expr -> lambda Pat '.' Expr                        (3)
	Expr -> str                                        (4)
	Expr -> Expr Expr                                  (5)
	Expr -> constr                                     (6)
	Expr -> constr Expr                                (7)
	Expr -> 'Π' Pat ColonExprDot Expr                  (8)
	Expr -> 'Σ' Pat ColonExprDot Expr                  (9)
	Expr -> 'U'                                        (10)
	Expr -> Expr '.' one                               (11)
	Expr -> Expr '.' two                               (12)
	Expr -> zero                                       (13)
	Expr -> one                                        (14)
	Expr -> Expr ',' Expr                              (15)
	Expr -> fun Choices                                (16)
	Expr -> sum Choices                                (17)
	Expr -> Expr '→' Expr                              (18)
	Expr -> Expr '×' Expr                              (19)
	Expr -> '(' Expr ')'                               (20)
	Expr -> recUnit Expr                               (21)
	ColonExprDot -> ':' Expr '.'                       (22)
	Pat -> str                                         (23)
	Pat -> Pat ',' Pat                                 (24)
	Pat -> '_'                                         (25)
	Pat -> '(' Pat ')'                                 (26)
	Choices -> '(' Choices_ ')'                        (27)
	Choices_ ->                                        (28)
	Choices_ -> ChoisesWhite                           (29)
	Choices_ -> ChoisesArrow                           (30)
	ChoisesWhite -> constr Expr                        (31)
	ChoisesWhite -> constr                             (32)
	ChoisesWhite -> constr Expr '|' ChoisesWhite       (33)
	ChoisesWhite -> constr '|' ChoisesWhite            (34)
	ChoisesArrow -> constr Pat '→' Expr                (35)
	ChoisesArrow -> constr '→' Expr                    (36)
	ChoisesArrow -> constr Pat '→' Expr '|' ChoisesArrow   (37)
	ChoisesArrow -> constr '→' Expr '|' ChoisesArrow   (38)
	Decl -> Pat ':' Expr '=' Expr                      (39)
	Decl -> rec Pat ':' Expr '=' Expr                  (40)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	lambda         { Token _ TokenLam }
	recUnit        { Token _ TokenRecUnit }
	rec            { Token _ TokenRec }
	'→'            { Token _ TokenArrow }
	str            { Token _ (TokenVar $$) }
	constr         { Token _ (TokenConstr $$) }
	'='            { Token _ TokenEq }
	'('            { Token _ TokenLParen }
	')'            { Token _ TokenRParen }
	'.'            { Token _ TokenDot }
	':'            { Token _ TokenColon }
	';'            { Token _ TokenSemiColon }
	'Π'            { Token _ TokenPi }
	'Σ'            { Token _ TokenSigma }
	','            { Token _ TokenComma }
	fun            { Token _ TokenFun }
	sum            { Token _ TokenSum }
	'|'            { Token _ TokenVBar }
	'_'            { Token _ TokenDummy }
	zero           { Token _ TokenZero }
	one            { Token _ TokenOne }
	two            { Token _ TokenTwo }
	'×'            { Token _ TokenTimes }
	'U'            { Token _ TokenU }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_parse    rule  0
	Prog            rules 1, 2
	Expr            rules 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21
	ColonExprDot    rule  22
	Pat             rules 23, 24, 25, 26
	Choices         rule  27
	Choices_        rules 28, 29, 30
	ChoisesWhite    rules 31, 32, 33, 34
	ChoisesArrow    rules 35, 36, 37, 38
	Decl            rules 39, 40

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0


	rec            shift, and enter state 5
	str            shift, and enter state 6
	'('            shift, and enter state 7
	'_'            shift, and enter state 8
	%eof           reduce using rule 1

	Prog           goto state 2
	Pat            goto state 3
	Decl           goto state 4

State 1




State 2

	%start_parse -> Prog .                              (rule 0)

	%eof           accept


State 3

	Pat -> Pat . ',' Pat                                (rule 24)
	Decl -> Pat . ':' Expr '=' Expr                     (rule 39)

	':'            shift, and enter state 12
	','            shift, and enter state 13


State 4

	Prog -> Decl . ';' Prog                             (rule 2)

	';'            shift, and enter state 11


State 5

	Decl -> rec . Pat ':' Expr '=' Expr                 (rule 40)

	str            shift, and enter state 6
	'('            shift, and enter state 7
	'_'            shift, and enter state 8

	Pat            goto state 10

State 6

	Pat -> str .                                        (rule 23)

	'→'            reduce using rule 23
	')'            reduce using rule 23
	'.'            reduce using rule 23
	':'            reduce using rule 23
	','            reduce using rule 23


State 7

	Pat -> '(' . Pat ')'                                (rule 26)

	str            shift, and enter state 6
	'('            shift, and enter state 7
	'_'            shift, and enter state 8

	Pat            goto state 9

State 8

	Pat -> '_' .                                        (rule 25)

	'→'            reduce using rule 25
	')'            reduce using rule 25
	'.'            reduce using rule 25
	':'            reduce using rule 25
	','            reduce using rule 25


State 9

	Pat -> Pat . ',' Pat                                (rule 24)
	Pat -> '(' Pat . ')'                                (rule 26)

	')'            shift, and enter state 30
	','            shift, and enter state 13


State 10

	Pat -> Pat . ',' Pat                                (rule 24)
	Decl -> rec Pat . ':' Expr '=' Expr                 (rule 40)

	':'            shift, and enter state 29
	','            shift, and enter state 13


State 11

	Prog -> Decl ';' . Prog                             (rule 2)

	rec            shift, and enter state 5
	str            shift, and enter state 6
	'('            shift, and enter state 7
	'_'            shift, and enter state 8
	%eof           reduce using rule 1

	Prog           goto state 28
	Pat            goto state 3
	Decl           goto state 4

State 12

	Decl -> Pat ':' . Expr '=' Expr                     (rule 39)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'U'            shift, and enter state 27

	Expr           goto state 15

State 13

	Pat -> Pat ',' . Pat                                (rule 24)

	str            shift, and enter state 6
	'('            shift, and enter state 7
	'_'            shift, and enter state 8

	Pat            goto state 14

State 14

	Pat -> Pat . ',' Pat                                (rule 24)
	Pat -> Pat ',' Pat .                                (rule 24)

	'→'            reduce using rule 24
	')'            reduce using rule 24
	'.'            reduce using rule 24
	':'            reduce using rule 24
	','            reduce using rule 24


State 15

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 11)
	Expr -> Expr . '.' two                              (rule 12)
	Expr -> Expr . ',' Expr                             (rule 15)
	Expr -> Expr . '→' Expr                             (rule 18)
	Expr -> Expr . '×' Expr                             (rule 19)
	Decl -> Pat ':' Expr . '=' Expr                     (rule 39)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	'→'            shift, and enter state 42
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'='            shift, and enter state 43
	'('            shift, and enter state 20
	'.'            shift, and enter state 44
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	','            shift, and enter state 45
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'×'            shift, and enter state 46
	'U'            shift, and enter state 27

	Expr           goto state 41

State 16

	Expr -> lambda . Pat '.' Expr                       (rule 3)

	str            shift, and enter state 6
	'('            shift, and enter state 7
	'_'            shift, and enter state 8

	Pat            goto state 40

State 17

	Expr -> recUnit . Expr                              (rule 21)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'U'            shift, and enter state 27

	Expr           goto state 39

State 18

	Expr -> str .                                       (rule 4)

	lambda         reduce using rule 4
	recUnit        reduce using rule 4
	'→'            reduce using rule 4
	str            reduce using rule 4
	constr         reduce using rule 4
	'='            reduce using rule 4
	'('            reduce using rule 4
	')'            reduce using rule 4
	'.'            reduce using rule 4
	';'            reduce using rule 4
	'Π'            reduce using rule 4
	'Σ'            reduce using rule 4
	','            reduce using rule 4
	fun            reduce using rule 4
	sum            reduce using rule 4
	'|'            reduce using rule 4
	zero           reduce using rule 4
	one            reduce using rule 4
	'×'            reduce using rule 4
	'U'            reduce using rule 4


State 19

	Expr -> constr .                                    (rule 6)
	Expr -> constr . Expr                               (rule 7)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	'→'            reduce using rule 6
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'='            reduce using rule 6
	'('            shift, and enter state 20
	')'            reduce using rule 6
	'.'            reduce using rule 6
	';'            reduce using rule 6
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	','            reduce using rule 6
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	'|'            reduce using rule 6
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'×'            reduce using rule 6
	'U'            shift, and enter state 27

	Expr           goto state 38

State 20

	Expr -> '(' . Expr ')'                              (rule 20)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'U'            shift, and enter state 27

	Expr           goto state 37

State 21

	Expr -> 'Π' . Pat ColonExprDot Expr                 (rule 8)

	str            shift, and enter state 6
	'('            shift, and enter state 7
	'_'            shift, and enter state 8

	Pat            goto state 36

State 22

	Expr -> 'Σ' . Pat ColonExprDot Expr                 (rule 9)

	str            shift, and enter state 6
	'('            shift, and enter state 7
	'_'            shift, and enter state 8

	Pat            goto state 35

State 23

	Expr -> fun . Choices                               (rule 16)

	'('            shift, and enter state 33

	Choices        goto state 34

State 24

	Expr -> sum . Choices                               (rule 17)

	'('            shift, and enter state 33

	Choices        goto state 32

State 25

	Expr -> zero .                                      (rule 13)

	lambda         reduce using rule 13
	recUnit        reduce using rule 13
	'→'            reduce using rule 13
	str            reduce using rule 13
	constr         reduce using rule 13
	'='            reduce using rule 13
	'('            reduce using rule 13
	')'            reduce using rule 13
	'.'            reduce using rule 13
	';'            reduce using rule 13
	'Π'            reduce using rule 13
	'Σ'            reduce using rule 13
	','            reduce using rule 13
	fun            reduce using rule 13
	sum            reduce using rule 13
	'|'            reduce using rule 13
	zero           reduce using rule 13
	one            reduce using rule 13
	'×'            reduce using rule 13
	'U'            reduce using rule 13


State 26

	Expr -> one .                                       (rule 14)

	lambda         reduce using rule 14
	recUnit        reduce using rule 14
	'→'            reduce using rule 14
	str            reduce using rule 14
	constr         reduce using rule 14
	'='            reduce using rule 14
	'('            reduce using rule 14
	')'            reduce using rule 14
	'.'            reduce using rule 14
	';'            reduce using rule 14
	'Π'            reduce using rule 14
	'Σ'            reduce using rule 14
	','            reduce using rule 14
	fun            reduce using rule 14
	sum            reduce using rule 14
	'|'            reduce using rule 14
	zero           reduce using rule 14
	one            reduce using rule 14
	'×'            reduce using rule 14
	'U'            reduce using rule 14


State 27

	Expr -> 'U' .                                       (rule 10)

	lambda         reduce using rule 10
	recUnit        reduce using rule 10
	'→'            reduce using rule 10
	str            reduce using rule 10
	constr         reduce using rule 10
	'='            reduce using rule 10
	'('            reduce using rule 10
	')'            reduce using rule 10
	'.'            reduce using rule 10
	';'            reduce using rule 10
	'Π'            reduce using rule 10
	'Σ'            reduce using rule 10
	','            reduce using rule 10
	fun            reduce using rule 10
	sum            reduce using rule 10
	'|'            reduce using rule 10
	zero           reduce using rule 10
	one            reduce using rule 10
	'×'            reduce using rule 10
	'U'            reduce using rule 10


State 28

	Prog -> Decl ';' Prog .                             (rule 2)

	%eof           reduce using rule 2


State 29

	Decl -> rec Pat ':' . Expr '=' Expr                 (rule 40)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'U'            shift, and enter state 27

	Expr           goto state 31

State 30

	Pat -> '(' Pat ')' .                                (rule 26)

	'→'            reduce using rule 26
	')'            reduce using rule 26
	'.'            reduce using rule 26
	':'            reduce using rule 26
	','            reduce using rule 26


State 31

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 11)
	Expr -> Expr . '.' two                              (rule 12)
	Expr -> Expr . ',' Expr                             (rule 15)
	Expr -> Expr . '→' Expr                             (rule 18)
	Expr -> Expr . '×' Expr                             (rule 19)
	Decl -> rec Pat ':' Expr . '=' Expr                 (rule 40)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	'→'            shift, and enter state 42
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'='            shift, and enter state 62
	'('            shift, and enter state 20
	'.'            shift, and enter state 44
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	','            shift, and enter state 45
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'×'            shift, and enter state 46
	'U'            shift, and enter state 27

	Expr           goto state 41

State 32

	Expr -> sum Choices .                               (rule 17)

	lambda         reduce using rule 17
	recUnit        reduce using rule 17
	'→'            reduce using rule 17
	str            reduce using rule 17
	constr         reduce using rule 17
	'='            reduce using rule 17
	'('            reduce using rule 17
	')'            reduce using rule 17
	'.'            reduce using rule 17
	';'            reduce using rule 17
	'Π'            reduce using rule 17
	'Σ'            reduce using rule 17
	','            reduce using rule 17
	fun            reduce using rule 17
	sum            reduce using rule 17
	'|'            reduce using rule 17
	zero           reduce using rule 17
	one            reduce using rule 17
	'×'            reduce using rule 17
	'U'            reduce using rule 17


State 33

	Choices -> '(' . Choices_ ')'                       (rule 27)

	constr         shift, and enter state 61
	')'            reduce using rule 28

	Choices_       goto state 58
	ChoisesWhite   goto state 59
	ChoisesArrow   goto state 60

State 34

	Expr -> fun Choices .                               (rule 16)

	lambda         reduce using rule 16
	recUnit        reduce using rule 16
	'→'            reduce using rule 16
	str            reduce using rule 16
	constr         reduce using rule 16
	'='            reduce using rule 16
	'('            reduce using rule 16
	')'            reduce using rule 16
	'.'            reduce using rule 16
	';'            reduce using rule 16
	'Π'            reduce using rule 16
	'Σ'            reduce using rule 16
	','            reduce using rule 16
	fun            reduce using rule 16
	sum            reduce using rule 16
	'|'            reduce using rule 16
	zero           reduce using rule 16
	one            reduce using rule 16
	'×'            reduce using rule 16
	'U'            reduce using rule 16


State 35

	Expr -> 'Σ' Pat . ColonExprDot Expr                 (rule 9)
	Pat -> Pat . ',' Pat                                (rule 24)

	':'            shift, and enter state 56
	','            shift, and enter state 13

	ColonExprDot   goto state 57

State 36

	Expr -> 'Π' Pat . ColonExprDot Expr                 (rule 8)
	Pat -> Pat . ',' Pat                                (rule 24)

	':'            shift, and enter state 56
	','            shift, and enter state 13

	ColonExprDot   goto state 55

State 37

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 11)
	Expr -> Expr . '.' two                              (rule 12)
	Expr -> Expr . ',' Expr                             (rule 15)
	Expr -> Expr . '→' Expr                             (rule 18)
	Expr -> Expr . '×' Expr                             (rule 19)
	Expr -> '(' Expr . ')'                              (rule 20)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	'→'            shift, and enter state 42
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	')'            shift, and enter state 54
	'.'            shift, and enter state 44
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	','            shift, and enter state 45
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'×'            shift, and enter state 46
	'U'            shift, and enter state 27

	Expr           goto state 41

State 38

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> constr Expr .                               (rule 7)
	Expr -> Expr . '.' one                              (rule 11)
	Expr -> Expr . '.' two                              (rule 12)
	Expr -> Expr . ',' Expr                             (rule 15)
	Expr -> Expr . '→' Expr                             (rule 18)
	Expr -> Expr . '×' Expr                             (rule 19)

	lambda         reduce using rule 7
	recUnit        reduce using rule 7
	'→'            reduce using rule 7
	str            reduce using rule 7
	constr         reduce using rule 7
	'='            reduce using rule 7
	'('            reduce using rule 7
	')'            reduce using rule 7
	'.'            reduce using rule 7
	';'            reduce using rule 7
	'Π'            reduce using rule 7
	'Σ'            reduce using rule 7
	','            reduce using rule 7
	fun            reduce using rule 7
	sum            reduce using rule 7
	'|'            reduce using rule 7
	zero           reduce using rule 7
	one            reduce using rule 7
	'×'            reduce using rule 7
	'U'            reduce using rule 7

	Expr           goto state 41

State 39

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 11)
	Expr -> Expr . '.' two                              (rule 12)
	Expr -> Expr . ',' Expr                             (rule 15)
	Expr -> Expr . '→' Expr                             (rule 18)
	Expr -> Expr . '×' Expr                             (rule 19)
	Expr -> recUnit Expr .                              (rule 21)

	lambda         fail
	recUnit        fail
	'→'            reduce using rule 21
	str            fail
	constr         fail
	'='            reduce using rule 21
	'('            shift, and enter state 20
	')'            reduce using rule 21
	'.'            reduce using rule 21
	';'            reduce using rule 21
	'Π'            fail
	'Σ'            fail
	','            shift, and enter state 45
	fun            fail
	sum            fail
	'|'            reduce using rule 21
	zero           fail
	one            fail
	'×'            shift, and enter state 46
	'U'            fail

	Expr           goto state 41

State 40

	Expr -> lambda Pat . '.' Expr                       (rule 3)
	Pat -> Pat . ',' Pat                                (rule 24)

	'.'            shift, and enter state 53
	','            shift, and enter state 13


State 41

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr Expr .                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 11)
	Expr -> Expr . '.' two                              (rule 12)
	Expr -> Expr . ',' Expr                             (rule 15)
	Expr -> Expr . '→' Expr                             (rule 18)
	Expr -> Expr . '×' Expr                             (rule 19)

	lambda         reduce using rule 5
	recUnit        reduce using rule 5
	'→'            reduce using rule 5
	str            reduce using rule 5
	constr         reduce using rule 5
	'='            reduce using rule 5
	'('            reduce using rule 5
	')'            reduce using rule 5
	'.'            reduce using rule 5
	';'            reduce using rule 5
	'Π'            reduce using rule 5
	'Σ'            reduce using rule 5
	','            reduce using rule 5
	fun            reduce using rule 5
	sum            reduce using rule 5
	'|'            reduce using rule 5
	zero           reduce using rule 5
	one            reduce using rule 5
	'×'            reduce using rule 5
	'U'            reduce using rule 5

	Expr           goto state 41

State 42

	Expr -> Expr '→' . Expr                             (rule 18)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'U'            shift, and enter state 27

	Expr           goto state 52

State 43

	Decl -> Pat ':' Expr '=' . Expr                     (rule 39)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'U'            shift, and enter state 27

	Expr           goto state 51

State 44

	Expr -> Expr '.' . one                              (rule 11)
	Expr -> Expr '.' . two                              (rule 12)

	one            shift, and enter state 49
	two            shift, and enter state 50


State 45

	Expr -> Expr ',' . Expr                             (rule 15)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'U'            shift, and enter state 27

	Expr           goto state 48

State 46

	Expr -> Expr '×' . Expr                             (rule 19)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'U'            shift, and enter state 27

	Expr           goto state 47

State 47

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 11)
	Expr -> Expr . '.' two                              (rule 12)
	Expr -> Expr . ',' Expr                             (rule 15)
	Expr -> Expr . '→' Expr                             (rule 18)
	Expr -> Expr . '×' Expr                             (rule 19)
	Expr -> Expr '×' Expr .                             (rule 19)

	lambda         reduce using rule 19
	recUnit        reduce using rule 19
	'→'            reduce using rule 19
	str            reduce using rule 19
	constr         reduce using rule 19
	'='            reduce using rule 19
	'('            shift, and enter state 20
	')'            reduce using rule 19
	'.'            reduce using rule 19
	';'            reduce using rule 19
	'Π'            reduce using rule 19
	'Σ'            reduce using rule 19
	','            reduce using rule 19
	fun            reduce using rule 19
	sum            reduce using rule 19
	'|'            reduce using rule 19
	zero           reduce using rule 19
	one            reduce using rule 19
	'×'            reduce using rule 19
	'U'            reduce using rule 19

	Expr           goto state 41

State 48

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 11)
	Expr -> Expr . '.' two                              (rule 12)
	Expr -> Expr . ',' Expr                             (rule 15)
	Expr -> Expr ',' Expr .                             (rule 15)
	Expr -> Expr . '→' Expr                             (rule 18)
	Expr -> Expr . '×' Expr                             (rule 19)

	lambda         reduce using rule 15
	recUnit        reduce using rule 15
	'→'            reduce using rule 15
	str            reduce using rule 15
	constr         reduce using rule 15
	'='            reduce using rule 15
	'('            shift, and enter state 20
	')'            reduce using rule 15
	'.'            reduce using rule 15
	';'            reduce using rule 15
	'Π'            reduce using rule 15
	'Σ'            reduce using rule 15
	','            reduce using rule 15
	fun            reduce using rule 15
	sum            reduce using rule 15
	'|'            reduce using rule 15
	zero           reduce using rule 15
	one            reduce using rule 15
	'×'            reduce using rule 15
	'U'            reduce using rule 15

	Expr           goto state 41

State 49

	Expr -> Expr '.' one .                              (rule 11)

	lambda         reduce using rule 11
	recUnit        reduce using rule 11
	'→'            reduce using rule 11
	str            reduce using rule 11
	constr         reduce using rule 11
	'='            reduce using rule 11
	'('            reduce using rule 11
	')'            reduce using rule 11
	'.'            reduce using rule 11
	';'            reduce using rule 11
	'Π'            reduce using rule 11
	'Σ'            reduce using rule 11
	','            reduce using rule 11
	fun            reduce using rule 11
	sum            reduce using rule 11
	'|'            reduce using rule 11
	zero           reduce using rule 11
	one            reduce using rule 11
	'×'            reduce using rule 11
	'U'            reduce using rule 11


State 50

	Expr -> Expr '.' two .                              (rule 12)

	lambda         reduce using rule 12
	recUnit        reduce using rule 12
	'→'            reduce using rule 12
	str            reduce using rule 12
	constr         reduce using rule 12
	'='            reduce using rule 12
	'('            reduce using rule 12
	')'            reduce using rule 12
	'.'            reduce using rule 12
	';'            reduce using rule 12
	'Π'            reduce using rule 12
	'Σ'            reduce using rule 12
	','            reduce using rule 12
	fun            reduce using rule 12
	sum            reduce using rule 12
	'|'            reduce using rule 12
	zero           reduce using rule 12
	one            reduce using rule 12
	'×'            reduce using rule 12
	'U'            reduce using rule 12


State 51

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 11)
	Expr -> Expr . '.' two                              (rule 12)
	Expr -> Expr . ',' Expr                             (rule 15)
	Expr -> Expr . '→' Expr                             (rule 18)
	Expr -> Expr . '×' Expr                             (rule 19)
	Decl -> Pat ':' Expr '=' Expr .                     (rule 39)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	'→'            shift, and enter state 42
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	'.'            shift, and enter state 44
	';'            reduce using rule 39
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	','            shift, and enter state 45
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'×'            shift, and enter state 46
	'U'            shift, and enter state 27

	Expr           goto state 41

State 52

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 11)
	Expr -> Expr . '.' two                              (rule 12)
	Expr -> Expr . ',' Expr                             (rule 15)
	Expr -> Expr . '→' Expr                             (rule 18)
	Expr -> Expr '→' Expr .                             (rule 18)
	Expr -> Expr . '×' Expr                             (rule 19)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	'→'            shift, and enter state 42
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'='            reduce using rule 18
	'('            shift, and enter state 20
	')'            reduce using rule 18
	'.'            reduce using rule 18
	';'            reduce using rule 18
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	','            shift, and enter state 45
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	'|'            reduce using rule 18
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'×'            shift, and enter state 46
	'U'            shift, and enter state 27

	Expr           goto state 41

State 53

	Expr -> lambda Pat '.' . Expr                       (rule 3)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'U'            shift, and enter state 27

	Expr           goto state 74

State 54

	Expr -> '(' Expr ')' .                              (rule 20)

	lambda         reduce using rule 20
	recUnit        reduce using rule 20
	'→'            reduce using rule 20
	str            reduce using rule 20
	constr         reduce using rule 20
	'='            reduce using rule 20
	'('            reduce using rule 20
	')'            reduce using rule 20
	'.'            reduce using rule 20
	';'            reduce using rule 20
	'Π'            reduce using rule 20
	'Σ'            reduce using rule 20
	','            reduce using rule 20
	fun            reduce using rule 20
	sum            reduce using rule 20
	'|'            reduce using rule 20
	zero           reduce using rule 20
	one            reduce using rule 20
	'×'            reduce using rule 20
	'U'            reduce using rule 20


State 55

	Expr -> 'Π' Pat ColonExprDot . Expr                 (rule 8)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'U'            shift, and enter state 27

	Expr           goto state 73

State 56

	ColonExprDot -> ':' . Expr '.'                      (rule 22)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'U'            shift, and enter state 27

	Expr           goto state 72

State 57

	Expr -> 'Σ' Pat ColonExprDot . Expr                 (rule 9)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'U'            shift, and enter state 27

	Expr           goto state 71

State 58

	Choices -> '(' Choices_ . ')'                       (rule 27)

	')'            shift, and enter state 70


State 59

	Choices_ -> ChoisesWhite .                          (rule 29)

	')'            reduce using rule 29


State 60

	Choices_ -> ChoisesArrow .                          (rule 30)

	')'            reduce using rule 30


State 61

	ChoisesWhite -> constr . Expr                       (rule 31)
	ChoisesWhite -> constr .                            (rule 32)
	ChoisesWhite -> constr . Expr '|' ChoisesWhite      (rule 33)
	ChoisesWhite -> constr . '|' ChoisesWhite           (rule 34)
	ChoisesArrow -> constr . Pat '→' Expr               (rule 35)
	ChoisesArrow -> constr . '→' Expr                   (rule 36)
	ChoisesArrow -> constr . Pat '→' Expr '|' ChoisesArrow    (rule 37)
	ChoisesArrow -> constr . '→' Expr '|' ChoisesArrow    (rule 38)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	'→'            shift, and enter state 66
	str            shift, and enter state 67
	constr         shift, and enter state 19
	'('            shift, and enter state 68
	')'            reduce using rule 32
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	'|'            shift, and enter state 69
	'_'            shift, and enter state 8
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'U'            shift, and enter state 27

	Expr           goto state 64
	Pat            goto state 65

State 62

	Decl -> rec Pat ':' Expr '=' . Expr                 (rule 40)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'U'            shift, and enter state 27

	Expr           goto state 63

State 63

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 11)
	Expr -> Expr . '.' two                              (rule 12)
	Expr -> Expr . ',' Expr                             (rule 15)
	Expr -> Expr . '→' Expr                             (rule 18)
	Expr -> Expr . '×' Expr                             (rule 19)
	Decl -> rec Pat ':' Expr '=' Expr .                 (rule 40)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	'→'            shift, and enter state 42
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	'.'            shift, and enter state 44
	';'            reduce using rule 40
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	','            shift, and enter state 45
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'×'            shift, and enter state 46
	'U'            shift, and enter state 27

	Expr           goto state 41

State 64

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 11)
	Expr -> Expr . '.' two                              (rule 12)
	Expr -> Expr . ',' Expr                             (rule 15)
	Expr -> Expr . '→' Expr                             (rule 18)
	Expr -> Expr . '×' Expr                             (rule 19)
	ChoisesWhite -> constr Expr .                       (rule 31)
	ChoisesWhite -> constr Expr . '|' ChoisesWhite      (rule 33)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	'→'            shift, and enter state 42
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	')'            reduce using rule 31
	'.'            shift, and enter state 44
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	','            shift, and enter state 45
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	'|'            shift, and enter state 80
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'×'            shift, and enter state 46
	'U'            shift, and enter state 27

	Expr           goto state 41

State 65

	Pat -> Pat . ',' Pat                                (rule 24)
	ChoisesArrow -> constr Pat . '→' Expr               (rule 35)
	ChoisesArrow -> constr Pat . '→' Expr '|' ChoisesArrow    (rule 37)

	'→'            shift, and enter state 79
	','            shift, and enter state 13


State 66

	ChoisesArrow -> constr '→' . Expr                   (rule 36)
	ChoisesArrow -> constr '→' . Expr '|' ChoisesArrow    (rule 38)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'U'            shift, and enter state 27

	Expr           goto state 78

State 67

	Expr -> str .                                       (rule 4)
	Pat -> str .                                        (rule 23)

	lambda         reduce using rule 4
	recUnit        reduce using rule 4
	'→'            reduce using rule 4
			(reduce using rule 23)

	str            reduce using rule 4
	constr         reduce using rule 4
	'('            reduce using rule 4
	')'            reduce using rule 4
			(reduce using rule 23)

	'.'            reduce using rule 4
	'Π'            reduce using rule 4
	'Σ'            reduce using rule 4
	','            reduce using rule 4
			(reduce using rule 23)

	fun            reduce using rule 4
	sum            reduce using rule 4
	'|'            reduce using rule 4
	zero           reduce using rule 4
	one            reduce using rule 4
	'×'            reduce using rule 4
	'U'            reduce using rule 4


State 68

	Expr -> '(' . Expr ')'                              (rule 20)
	Pat -> '(' . Pat ')'                                (rule 26)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	str            shift, and enter state 67
	constr         shift, and enter state 19
	'('            shift, and enter state 68
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	'_'            shift, and enter state 8
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'U'            shift, and enter state 27

	Expr           goto state 37
	Pat            goto state 9

State 69

	ChoisesWhite -> constr '|' . ChoisesWhite           (rule 34)

	constr         shift, and enter state 77

	ChoisesWhite   goto state 76

State 70

	Choices -> '(' Choices_ ')' .                       (rule 27)

	lambda         reduce using rule 27
	recUnit        reduce using rule 27
	'→'            reduce using rule 27
	str            reduce using rule 27
	constr         reduce using rule 27
	'='            reduce using rule 27
	'('            reduce using rule 27
	')'            reduce using rule 27
	'.'            reduce using rule 27
	';'            reduce using rule 27
	'Π'            reduce using rule 27
	'Σ'            reduce using rule 27
	','            reduce using rule 27
	fun            reduce using rule 27
	sum            reduce using rule 27
	'|'            reduce using rule 27
	zero           reduce using rule 27
	one            reduce using rule 27
	'×'            reduce using rule 27
	'U'            reduce using rule 27


State 71

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> 'Σ' Pat ColonExprDot Expr .                 (rule 9)
	Expr -> Expr . '.' one                              (rule 11)
	Expr -> Expr . '.' two                              (rule 12)
	Expr -> Expr . ',' Expr                             (rule 15)
	Expr -> Expr . '→' Expr                             (rule 18)
	Expr -> Expr . '×' Expr                             (rule 19)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	'→'            shift, and enter state 42
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'='            reduce using rule 9
	'('            shift, and enter state 20
	')'            reduce using rule 9
	'.'            shift, and enter state 44
	';'            reduce using rule 9
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	','            shift, and enter state 45
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	'|'            reduce using rule 9
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'×'            shift, and enter state 46
	'U'            shift, and enter state 27

	Expr           goto state 41

State 72

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 11)
	Expr -> Expr . '.' two                              (rule 12)
	Expr -> Expr . ',' Expr                             (rule 15)
	Expr -> Expr . '→' Expr                             (rule 18)
	Expr -> Expr . '×' Expr                             (rule 19)
	ColonExprDot -> ':' Expr . '.'                      (rule 22)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	'→'            shift, and enter state 42
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	'.'            shift, and enter state 75
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	','            shift, and enter state 45
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'×'            shift, and enter state 46
	'U'            shift, and enter state 27

	Expr           goto state 41

State 73

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> 'Π' Pat ColonExprDot Expr .                 (rule 8)
	Expr -> Expr . '.' one                              (rule 11)
	Expr -> Expr . '.' two                              (rule 12)
	Expr -> Expr . ',' Expr                             (rule 15)
	Expr -> Expr . '→' Expr                             (rule 18)
	Expr -> Expr . '×' Expr                             (rule 19)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	'→'            shift, and enter state 42
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'='            reduce using rule 8
	'('            shift, and enter state 20
	')'            reduce using rule 8
	'.'            shift, and enter state 44
	';'            reduce using rule 8
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	','            shift, and enter state 45
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	'|'            reduce using rule 8
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'×'            shift, and enter state 46
	'U'            shift, and enter state 27

	Expr           goto state 41

State 74

	Expr -> lambda Pat '.' Expr .                       (rule 3)
	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 11)
	Expr -> Expr . '.' two                              (rule 12)
	Expr -> Expr . ',' Expr                             (rule 15)
	Expr -> Expr . '→' Expr                             (rule 18)
	Expr -> Expr . '×' Expr                             (rule 19)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	'→'            shift, and enter state 42
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'='            reduce using rule 3
	'('            shift, and enter state 20
	')'            reduce using rule 3
	'.'            reduce using rule 3
	';'            reduce using rule 3
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	','            shift, and enter state 45
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	'|'            reduce using rule 3
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'×'            shift, and enter state 46
	'U'            shift, and enter state 27

	Expr           goto state 41

State 75

	Expr -> Expr '.' . one                              (rule 11)
	Expr -> Expr '.' . two                              (rule 12)
	ColonExprDot -> ':' Expr '.' .                      (rule 22)

	lambda         reduce using rule 22
	recUnit        reduce using rule 22
	str            reduce using rule 22
	constr         reduce using rule 22
	'('            reduce using rule 22
	'Π'            reduce using rule 22
	'Σ'            reduce using rule 22
	fun            reduce using rule 22
	sum            reduce using rule 22
	zero           reduce using rule 22
	one            shift, and enter state 49
	two            shift, and enter state 50
	'U'            reduce using rule 22


State 76

	ChoisesWhite -> constr '|' ChoisesWhite .           (rule 34)

	')'            reduce using rule 34


State 77

	ChoisesWhite -> constr . Expr                       (rule 31)
	ChoisesWhite -> constr .                            (rule 32)
	ChoisesWhite -> constr . Expr '|' ChoisesWhite      (rule 33)
	ChoisesWhite -> constr . '|' ChoisesWhite           (rule 34)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	')'            reduce using rule 32
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	'|'            shift, and enter state 69
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'U'            shift, and enter state 27

	Expr           goto state 64

State 78

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 11)
	Expr -> Expr . '.' two                              (rule 12)
	Expr -> Expr . ',' Expr                             (rule 15)
	Expr -> Expr . '→' Expr                             (rule 18)
	Expr -> Expr . '×' Expr                             (rule 19)
	ChoisesArrow -> constr '→' Expr .                   (rule 36)
	ChoisesArrow -> constr '→' Expr . '|' ChoisesArrow    (rule 38)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	'→'            shift, and enter state 42
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	')'            reduce using rule 36
	'.'            shift, and enter state 44
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	','            shift, and enter state 45
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	'|'            shift, and enter state 83
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'×'            shift, and enter state 46
	'U'            shift, and enter state 27

	Expr           goto state 41

State 79

	ChoisesArrow -> constr Pat '→' . Expr               (rule 35)
	ChoisesArrow -> constr Pat '→' . Expr '|' ChoisesArrow    (rule 37)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'U'            shift, and enter state 27

	Expr           goto state 82

State 80

	ChoisesWhite -> constr Expr '|' . ChoisesWhite      (rule 33)

	constr         shift, and enter state 77

	ChoisesWhite   goto state 81

State 81

	ChoisesWhite -> constr Expr '|' ChoisesWhite .      (rule 33)

	')'            reduce using rule 33


State 82

	Expr -> Expr . Expr                                 (rule 5)
	Expr -> Expr . '.' one                              (rule 11)
	Expr -> Expr . '.' two                              (rule 12)
	Expr -> Expr . ',' Expr                             (rule 15)
	Expr -> Expr . '→' Expr                             (rule 18)
	Expr -> Expr . '×' Expr                             (rule 19)
	ChoisesArrow -> constr Pat '→' Expr .               (rule 35)
	ChoisesArrow -> constr Pat '→' Expr . '|' ChoisesArrow    (rule 37)

	lambda         shift, and enter state 16
	recUnit        shift, and enter state 17
	'→'            shift, and enter state 42
	str            shift, and enter state 18
	constr         shift, and enter state 19
	'('            shift, and enter state 20
	')'            reduce using rule 35
	'.'            shift, and enter state 44
	'Π'            shift, and enter state 21
	'Σ'            shift, and enter state 22
	','            shift, and enter state 45
	fun            shift, and enter state 23
	sum            shift, and enter state 24
	'|'            shift, and enter state 86
	zero           shift, and enter state 25
	one            shift, and enter state 26
	'×'            shift, and enter state 46
	'U'            shift, and enter state 27

	Expr           goto state 41

State 83

	ChoisesArrow -> constr '→' Expr '|' . ChoisesArrow    (rule 38)

	constr         shift, and enter state 85

	ChoisesArrow   goto state 84

State 84

	ChoisesArrow -> constr '→' Expr '|' ChoisesArrow .    (rule 38)

	')'            reduce using rule 38


State 85

	ChoisesArrow -> constr . Pat '→' Expr               (rule 35)
	ChoisesArrow -> constr . '→' Expr                   (rule 36)
	ChoisesArrow -> constr . Pat '→' Expr '|' ChoisesArrow    (rule 37)
	ChoisesArrow -> constr . '→' Expr '|' ChoisesArrow    (rule 38)

	'→'            shift, and enter state 66
	str            shift, and enter state 6
	'('            shift, and enter state 7
	'_'            shift, and enter state 8

	Pat            goto state 65

State 86

	ChoisesArrow -> constr Pat '→' Expr '|' . ChoisesArrow    (rule 37)

	constr         shift, and enter state 85

	ChoisesArrow   goto state 87

State 87

	ChoisesArrow -> constr Pat '→' Expr '|' ChoisesArrow .    (rule 37)

	')'            reduce using rule 37


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 41
Number of terminals: 24
Number of non-terminals: 10
Number of states: 88
