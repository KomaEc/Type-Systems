--id : ∀ a : U . a → a
--   = λ a . λ x . x
--;

bool : U 
     = Sum (True | False)
;

true : bool
     = True
;

false : bool
      = False
;

elimBool : ∀ c : bool → U . c false → c true → ∀ b : bool . c b
         = λ c . λ h0 . λ h1 . fun (True → h1 | False → h0)
; 

rec nat : U
        = Sum (Zero | Succ nat)
;

rec natrec : ∀ c : nat → U . c Zero → (∀ n : nat . c n → c (Succ n)) 
           → ∀ n : nat . c n
           = λ c . λ a . λ g . fun (Zero → a | Succ n → g n (natrec c a g n))
;

rec add : nat -> nat -> nat
        = λ n . fun (Zero → n | Succ m → Succ (add n m))
;

rec eqNat : nat → nat → bool
          = fun (Zero → fun (Zero → True | Succ _ → False)
               | Succ n → fun (Zero → False | Succ m → eqNat n m))
;